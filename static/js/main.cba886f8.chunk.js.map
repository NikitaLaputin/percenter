{"version":3,"sources":["components/inputs/styles.module.css","components/main/styles.module.css","utils/index.js","context/reducer-context.js","context/toast-context.js","components/inputs/basic-input.js","components/inputs/number-input.js","components/inputs/percent-input.js","components/inputs/result-input.js","components/inputs/operator-selector.js","components/inputs/numbers-operators-selector.js","components/inputs/percentage-operator-selector.js","components/main/index.js","components/toast/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","comaReplacer","val","toString","replace","dotReplacer","ReducerContext","createContext","percentageOperators","from","add","takeAway","numbersOperators","greater","lesser","initialState","percent","number","operator","result","activeInputs","calcucaleResult","rest","Math","round","reducer","state","type","payload","Object","freeze","newState","setNumber","setPercent","setResult","ToastContext","BasicInput","onChange","postfix","useContext","dispatch","value","readOnly","includes","inputRef","useRef","addToast","className","styles","ref","e","target","onClick","current","select","document","execCommand","focus","message","NumberInput","PercentInput","ResultInput","OperatorSelector","operators","keys","map","key","NumbersOperatorSelector","PercentageOperatorSelector","Main","Toast","ToastManager","children","useState","lastId","setLastId","toasts","setToasts","Provider","id","setTimeout","slice","length","style","position","top","right","toast","App","useReducer","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cba886f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-container\":\"styles_input-container__27ksc\",\"input-container__active\":\"styles_input-container__active__ktjsq\",\"operator-selector\":\"styles_operator-selector__mQbQA\",\"active\":\"styles_active__UWdSi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-container\":\"styles_main-container__3Wyd9\",\"content\":\"styles_content__1PhYs\"};","export const toNumber = val =>\n  val.replace(/(^[0-9]+)(\\.|,)?([0-9]+)?([^0-9,.])+/, \"$1$2$3\");\nexport const comaReplacer = val =>\n  val.toString().replace(\",\", \".\") === \".\"\n    ? \"0.\"\n    : +val.toString().replace(\",\", \".\");\nexport const dotReplacer = val =>\n  val.toString().replace(\".\", \",\") === \",\"\n    ? \"0,\"\n    : val.toString().replace(\".\", \",\");\n","import { createContext } from \"react\";\nimport { comaReplacer, dotReplacer } from \"../utils\";\n\nexport const ReducerContext = createContext(null);\n\nexport const percentageOperators = {\n  from: \"от\",\n  add: \"прибавить\",\n  takeAway: \"отнять\"\n};\nexport const numbersOperators = {\n  greater: \"больше на\",\n  lesser: \"меньше на\"\n};\n\nexport const initialState = {\n  percent: 1,\n  number: 100,\n  operator: \"from\",\n  result: 1,\n  activeInputs: [\"percent\", \"number\"]\n};\n\nconst SET_PERCENT = \"SET_PERCENT\";\nconst SET_NUMBER = \"SET_NUMBER\";\nconst SET_RESULT = \"SET_RESULT\";\nconst SET_OPERATOR = \"SET_OPERATOR\";\n\nconst calcucaleResult = ({ percent, number, operator, result, ...rest }) =>\n  operator === \"from\"\n    ? {\n        percent,\n        number,\n        operator,\n        result: dotReplacer(\n          Math.round(\n            ((comaReplacer(number) * comaReplacer(percent)) / 100) * 100\n          ) / 100\n        ),\n        ...rest\n      }\n    : operator === \"add\"\n    ? {\n        percent,\n        number,\n        operator,\n        result: dotReplacer(\n          Math.round(\n            comaReplacer(number) * (1 + comaReplacer(percent) / 100) * 100\n          ) / 100\n        ),\n        ...rest\n      }\n    : operator === \"takeAway\"\n    ? {\n        percent,\n        number,\n        operator,\n        result: dotReplacer(\n          Math.round(\n            comaReplacer(number) * (1 - comaReplacer(percent) / 100) * 100\n          ) / 100\n        ),\n        ...rest\n      }\n    : operator === \"greater\"\n    ? {\n        number,\n        result,\n        operator,\n        percent: dotReplacer(\n          Math.round(\n            (comaReplacer(number) / comaReplacer(result) - 1) * 100 * 100\n          ) / 100\n        ),\n        ...rest\n      }\n    : operator === \"lesser\"\n    ? {\n        number,\n        result,\n        operator,\n        percent: dotReplacer(\n          Math.round(\n            (1 - comaReplacer(number) / comaReplacer(result)) * 100 * 100\n          ) / 100\n        ),\n        ...rest\n      }\n    : { percent, number, operator, result };\n\nexport const reducer = (state = initialState, { type, payload }) => {\n  Object.freeze(state);\n  switch (type) {\n    case SET_NUMBER: {\n      const newState = { ...state, number: payload };\n      return calcucaleResult(newState);\n    }\n    case SET_PERCENT: {\n      const newState = { ...state, percent: payload };\n      return calcucaleResult(newState);\n    }\n    case SET_RESULT: {\n      const newState = { ...state, result: payload };\n      return calcucaleResult(newState);\n    }\n    case SET_OPERATOR: {\n      if (!payload) return state;\n      const newState = {\n        ...state,\n        operator: payload,\n        activeInputs:\n          payload === \"greater\" || payload === \"lesser\"\n            ? [\"number\", \"result\"]\n            : [\"percent\", \"number\"]\n      };\n      return calcucaleResult(newState);\n    }\n    default:\n      return state;\n  }\n};\n\nexport const setNumber = payload => ({ type: SET_NUMBER, payload });\nexport const setPercent = payload => ({ type: SET_PERCENT, payload });\nexport const setResult = payload => ({ type: SET_RESULT, payload });\nexport const setOperator = payload => ({ type: SET_OPERATOR, payload });\n","import { createContext } from \"react\";\n\nexport const ToastContext = createContext(null);\n","import React, { useContext, useRef } from \"react\";\nimport { ReducerContext } from \"../../context/reducer-context\";\nimport { toNumber } from \"../../utils\";\nimport { ToastContext } from \"../../context/toast-context\";\nimport styles from \"./styles.module.css\";\n\nconst BasicInput = ({ type, onChange, postfix }) => {\n  const [state, dispatch] = useContext(ReducerContext);\n  const { activeInputs } = state;\n  const value = state[type];\n  const readOnly = !activeInputs.includes(type);\n  const inputRef = useRef(null);\n  const addToast = useContext(ToastContext);\n  const handleChange = e => {\n    const value = toNumber(e.target.value);\n    dispatch(onChange(value));\n  };\n  const onCLick = e => {\n    if (!readOnly) return;\n    inputRef.current.select();\n    document.execCommand(\"copy\");\n    e.target.focus();\n    addToast({ message: \"Значение скопировано!\" });\n  };\n  return (\n    <div\n      className={`${styles[\"input-container\"]}\n        ${!readOnly && styles[\"input-container__active\"]}`}\n    >\n      <input\n        ref={inputRef}\n        value={value}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onClick={onCLick}\n      ></input>\n      {postfix && <label>{postfix}</label>}\n    </div>\n  );\n};\n\nexport default BasicInput;\n","import React from \"react\";\nimport { setNumber } from \"../../context/reducer-context\";\nimport BasicInput from \"./basic-input\";\n\nconst NumberInput = () => <BasicInput type=\"number\" onChange={setNumber} />;\n\nexport default NumberInput;\n","import React from \"react\";\nimport { setPercent } from \"../../context/reducer-context\";\nimport BasicInput from \"./basic-input\";\n\nconst PercentInput = () => (\n  <BasicInput type=\"percent\" onChange={setPercent} postfix=\"%\" />\n);\n\nexport default PercentInput;\n","import React from \"react\";\nimport { setResult } from \"../../context/reducer-context\";\nimport BasicInput from \"./basic-input\";\n\nconst ResultInput = () => <BasicInput type=\"result\" onChange={setResult} />;\n\nexport default ResultInput;\n","import React, { useContext } from \"react\";\nimport { ReducerContext, setOperator } from \"../../context/reducer-context\";\nimport styles from \"./styles.module.css\";\n\nconst OperatorSelector = ({ operators }) => {\n  const [{ operator }, dispatch] = useContext(ReducerContext);\n  const onClick = e => {\n    dispatch(setOperator(e.target.value));\n  };\n  return (\n    <div className={styles[\"operator-selector\"]}>\n      {Object.keys(operators).map(key => (\n        <button\n          onClick={onClick}\n          key={key}\n          value={key}\n          className={key === operator ? styles[\"active\"] : \"\"}\n        >\n          {operators[key]}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default OperatorSelector;\n","import React from \"react\";\nimport OperatorSelector from \"./operator-selector\";\nimport { numbersOperators } from \"../../context/reducer-context\";\n\nconst NumbersOperatorSelector = () => (\n  <OperatorSelector operators={numbersOperators} />\n);\n\nexport default NumbersOperatorSelector;\n","import React from \"react\";\nimport OperatorSelector from \"./operator-selector\";\nimport { percentageOperators } from \"../../context/reducer-context\";\n\nconst PercentageOperatorSelector = () => (\n  <OperatorSelector operators={percentageOperators} />\n);\n\nexport default PercentageOperatorSelector;\n","import React from \"react\";\nimport NumberInput from \"../inputs/number-input\";\nimport PercentInput from \"../inputs/percent-input\";\nimport ResultInput from \"../inputs/result-input\";\nimport styles from \"./styles.module.css\";\nimport NumbersOperatorSelector from \"../inputs/numbers-operators-selector\";\nimport PercentageOperatorSelector from \"../inputs/percentage-operator-selector\";\n\nconst Main = () => (\n  <div className={styles[\"main-container\"]}>\n    <div className={styles[\"content\"]}>\n      <PercentInput />\n      <PercentageOperatorSelector />\n      <NumberInput />\n      <NumbersOperatorSelector />\n      <ResultInput />\n    </div>\n  </div>\n);\n\nexport default Main;\n","import React, { useState } from \"react\";\nimport { ToastContext } from \"../../context/toast-context\";\n\nconst Toast = ({ message, type = \"success\" }) => <div>{message}</div>;\n\nconst ToastManager = ({ children }) => {\n  const [lastId, setLastId] = useState(1);\n  const [toasts, setToasts] = useState([]);\n  const addToast = ({ type, message }) => {\n    setLastId(id => id + 1);\n    setToasts(toasts => [...toasts, { id: lastId + 1, type, message }]);\n    setTimeout(() => setToasts(toasts => toasts.slice(1)), 3000);\n  };\n  return (\n    <ToastContext.Provider value={addToast}>\n      {toasts.length ? (\n        <div style={{ position: \"absolute\", top: 50, right: 400 }}>\n          {toasts.map(toast => (\n            <Toast key={toast.id} type={toast.type} message={toast.message} />\n          ))}\n        </div>\n      ) : null}\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastManager;\n","import React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/main\";\nimport {\n  reducer,\n  initialState,\n  ReducerContext\n} from \"./context/reducer-context\";\nimport ToastManager from \"./components/toast\";\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <ReducerContext.Provider value={[state, dispatch]}>\n      <ToastManager>\n        <Main />\n      </ToastManager>\n    </ReducerContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}